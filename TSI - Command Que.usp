/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:         Jeff Pride
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
 #SYMBOL_NAME "TSI - Command Queue"
#CATEGORY "46" "#TSI Modules"

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DEFINE_CONSTANT MAX_QUEUE_SIZE 100
#DEFINE_CONSTANT MAX_CMD_STRING_SIZE 65534

#DEFINE_CONSTANT	DEBUG	0


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/

#USER_SIMPLSHARP_LIBRARY "TSI.ThreeSeries.CommandQueue"

/*
	class events
	//triggered when the class dequeues a command and sends it to simpl+		
	EventHandler ProcessQueueEventCall ( CommandQueue sender, ProcessQueueEventArgs e ); 

	class functions
	FUNCTION AddCommand ( STRING cmd ); //Add a string to the command queue
	FUNCTION ProcessQueue (); //removes the first command on the queue and triggers the EventHandler ProcessQueueEventCall
  

*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT                 Process;

STRING_INPUT                  Command$[MAX_QUEUE_SIZE][MAX_CMD_STRING_SIZE];

string_output                    OutgoingCommand$;


//NONVOLATILE string nvLocalCommandQueue[MAX_QUEUE_SIZE][MAX_CMD_STRING_SIZE];
   
//instantiate CommandQueue object
CommandQueue queue;
                

//***************************FUNCTIONS*********************************//
function RegisterEventHandlers()
{
	RegisterEvent(queue, ProcessQueueEventCall, OnProcessQueueEventCall);	
}

function ProcessCommandQueue()
{
	queue.ProcessQueue();
}
           

//*****************************EVENTS***********************************//
Push Process
{
      ProcessCommandQueue();
}

Threadsafe Change Command$
{
	  //add current command to queue then process queue
      queue.AddCommand(Command$[GetLastModifiedArrayIndex()]);
	  ProcessCommandQueue();
}

eventhandler OnProcessQueueEventCall(CommandQueue sender, ProcessQueueEventArgs args)
{
      OutgoingCommand$ = args.cmd;
	  if (DEBUG) {	trace("Command: %s", args.cmd); }
           
	  //wait .2s after sending last command to process queue and send next one    
	  delay(20);
	  ProcessCommandQueue();
	
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
      RegisterEventHandlers();
      WaitForInitializationComplete();

}


